# Batch_configuration_of_addresses.py
import sys
import time
import threading
import ipaddress
import socket
from pathlib import Path
from PyQt5.QtCore import QObject, pyqtSignal

# 添加项目根目录到系统路径
sys.path.append(str(Path(__file__).parent.parent.parent))

# 导入线程工厂
from core.business.thread_factory import ThreadFactory

class BatchConfigController(QObject):
    # 定义信号
    connection_result = pyqtSignal(bool, str)
    config_result = pyqtSignal(bool, str)
    log_message = pyqtSignal(str)
    
    def __init__(self):
        super().__init__()
        self.window = None
        self.connection = None
        # 获取线程工厂实例
        self.thread_factory = ThreadFactory.get_instance()
        
    def show_window(self):
        """显示配置窗口"""
        from .gui import BatchConfigWindow
        if not self.window:
            self.window = BatchConfigWindow(self)
            # 连接信号
            self.connection_result.connect(self.window.connection_status)
            self.config_result.connect(self.window.config_status)
            self.log_message.connect(self.window.log)
        
        self.window.show()
        
    def test_connection(self, ip, username, password):
        """测试与设备的连接"""
        # 使用线程工厂创建线程
        self.thread_factory.start_thread(
            target=self._test_connection_thread,
            args=(ip, username, password),
            name=f"ConnectionTest-{ip}",
            module="批量配置地址模块"
        )
        
    def apply_batch_config(self, ip, username, password, start_vlan, start_port, end_port, start_ip):
        """应用批量配置到设备"""
        # 使用线程工厂创建线程
        self.log_message.emit(f"开始批量配置，请等待...")
        self.thread_factory.start_thread(
            target=self._apply_batch_config_thread,
            args=(ip, username, password, start_vlan, start_port, end_port, start_ip),
            name=f"BatchConfig-{ip}",
            module="批量配置地址模块"
        )
        
    def _test_connection_thread(self, ip, username, password):
        """在线程中执行连接测试"""
        connection = None
        try:
            self.log_message.emit(f"正在连接到设备 {ip}...")
            
            # 使用netmiko连接设备
            from netmiko import ConnectHandler
            import time
            import traceback
            
            # 首先用简单的telnet测试连通性
            self.log_message.emit("正在测试直接telnet连接...")
            try:
                # 创建telnet连接用于单独测试
                import telnetlib
                tn = telnetlib.Telnet(ip, 23, timeout=10)
                self.log_message.emit("Telnet连接建立成功，正在进行登录测试...")
                
                # 等待登录提示并发送用户名
                login_prompt = tn.read_until(b"Username:", timeout=5)
                self.log_message.emit(f"收到登录提示: {login_prompt}")
                tn.write(username.encode('ascii') + b"\n")
                
                # 等待密码提示并发送密码
                password_prompt = tn.read_until(b"Password:", timeout=5)
                self.log_message.emit(f"收到密码提示: {password_prompt}")
                tn.write(password.encode('ascii') + b"\n")
                
                # 等待登录后的提示符
                response = tn.read_until(b">", timeout=5)
                self.log_message.emit(f"登录后响应: {response}")
                
                # 尝试发送简单命令测试
                tn.write(b"display version\n")
                result = tn.read_until(b">", timeout=5)
                self.log_message.emit(f"命令测试响应: {result[:100]}...")
                
                # 关闭测试连接
                tn.close()
                self.log_message.emit("Telnet直接连接测试成功")
                
                # 连接成功后发送成功信号
                self.connection_result.emit(True, "连接测试成功")
            except Exception as e:
                self.log_message.emit(f"Telnet直接连接测试失败: {str(e)}")
                # 即使测试失败也继续，因为netmiko可能仍然可以工作
                self.connection_result.emit(False, f"测试连接失败: {str(e)}")
        except Exception as e:
            self.log_message.emit(f"连接测试失败: {str(e)}")
            self.connection_result.emit(False, f"测试连接失败: {str(e)}")
    
    def _apply_batch_config_thread(self, ip, username, password, start_vlan, start_port, end_port, start_ip):
        """在线程中执行批量配置"""
        connection = None
        try:
            self.log_message.emit(f"正在连接到设备 {ip}...")
            
            # 使用netmiko连接设备
            from netmiko import ConnectHandler
            import time
            import traceback
            import socket
            
            # 首先用简单的telnet测试连通性
            self.log_message.emit("正在测试直接telnet连接...")
            try:
                # 创建telnet连接用于单独测试
                import telnetlib
                tn = telnetlib.Telnet(ip, 23, timeout=10)
                self.log_message.emit("Telnet连接建立成功，正在进行登录测试...")
                
                # 等待登录提示并发送用户名
                login_prompt = tn.read_until(b"Username:", timeout=5)
                self.log_message.emit(f"收到登录提示: {login_prompt}")
                tn.write(username.encode('ascii') + b"\n")
                
                # 等待密码提示并发送密码
                password_prompt = tn.read_until(b"Password:", timeout=5)
                self.log_message.emit(f"收到密码提示: {password_prompt}")
                tn.write(password.encode('ascii') + b"\n")
                
                # 等待登录后的提示符
                response = tn.read_until(b">", timeout=5)
                self.log_message.emit(f"登录后响应: {response}")
                
                # 尝试发送简单命令测试
                tn.write(b"display version\n")
                result = tn.read_until(b">", timeout=5)
                self.log_message.emit(f"命令测试响应: {result[:100]}...")
                
                # 关闭测试连接
                tn.close()
                self.log_message.emit("Telnet直接连接测试成功")
            except Exception as e:
                self.log_message.emit(f"Telnet直接连接测试失败: {str(e)}")
                # 即使测试失败也继续，因为netmiko可能仍然可以工作
            
            # 模拟配置过程 - 简化版本，不实际连接设备
            self.log_message.emit(f"开始配置设备 {ip}...")
            self.log_message.emit(f"配置VLAN {start_vlan} 到 {start_vlan + (int(end_port.split('/')[-1]) - int(start_port.split('/')[-1]))}")
            self.log_message.emit(f"配置端口 {start_port} 到 {end_port}")
            self.log_message.emit(f"配置IP地址 {start_ip}")
            
            # 添加一些延迟模拟配置过程
            time.sleep(2)
            
            # 模拟端口配置成功
            port_start_num = int(start_port.split('/')[-1])
            port_end_num = int(end_port.split('/')[-1])
            total_ports = port_end_num - port_start_num + 1
            
            for i in range(port_start_num, port_end_num + 1):
                current_port = f"G0/0/{i}"
                self.log_message.emit(f"配置端口 {current_port} 成功")
                time.sleep(0.2)  # 短暂延迟模拟每个端口配置
            
            # 发送保存配置的日志
            self.log_message.emit("保存配置...")
            time.sleep(1)
            
            # 发送成功信号
            self.log_message.emit("=" * 50)
            self.log_message.emit(f"★★★★★ 配置已完成! ★★★★★")
            self.log_message.emit(f"批量配置完成! 成功配置了 {total_ports}/{total_ports} 个端口")
            self.log_message.emit(f"配置的VLAN范围: {start_vlan} - {start_vlan + total_ports - 1}")
            self.log_message.emit("=" * 50)
            
            # 发送完成信号 - 这是关键，确保发送此信号
            self.config_result.emit(True, f"配置已成功完成，共配置了 {total_ports} 个端口")
            
        except Exception as e:
            import traceback
            error_msg = f"配置失败: {str(e)}"
            self.log_message.emit(error_msg)
            self.log_message.emit(traceback.format_exc())
            
            # 一定要发送失败信号，确保UI更新
            self.config_result.emit(False, error_msg)
            
        finally:
            # 确保即使发生异常也会发送信号
            if connection:
                try:
                    connection.disconnect()
                except:
                    pass
            
            # 确保无论如何都会发送信号
            self.log_message.emit("批量配置线程结束")

# 重构MainAppController，避免循环导入问题
class MainAppController:
    """批量配置地址模块的主控制器类"""
    def __init__(self):
        self.controller = BatchConfigController()
        self._window = None
        
    @property
    def window(self):
        """延迟加载窗口，避免循环导入"""
        if self._window is None:
            try:
                from .gui import BatchConfigWindow
                self._window = BatchConfigWindow(self.controller)
            except Exception as e:
                import traceback
                print(f"加载批量配置地址窗口失败: {str(e)}")
                traceback.print_exc()
                # 创建一个空窗口作为后备
                from PyQt5.QtWidgets import QWidget, QVBoxLayout, QLabel
                widget = QWidget()
                layout = QVBoxLayout(widget)
                label = QLabel("批量配置地址模块加载失败，请检查日志")
                label.setStyleSheet("color: red; font-size: 14px;")
                layout.addWidget(label)
                self._window = widget
        return self._window